/* Generated by Continuation.js v0.0.3 */
var SortingAnimations;
'use strict';
SortingAnimations = function (canvas) {
  var ctx, lineWidth, updateCost, compareCost, randomArray, paint, compareAsync, swapAsync, assignAsync, sortOperations, self;
  ctx = canvas.getContext ? canvas.getContext('2d') : null;
  lineWidth = 9;
  updateCost = 50;
  compareCost = 30;
  randomArray = function () {
    var array, length, i;
    array = [];
    length = Math.floor(canvas.width / (lineWidth + 1));
    i = 1;
    while (i <= length) {
      array.push(i);
      i++;
    }
    array.sort(function () {
      return Math.round(Math.random()) - 0.5;
    });
    return array;
  };
  paint = function (array, updating) {
    var i, x, height;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.lineWidth = lineWidth;
    i = 0;
    while (i < array.length) {
      x = (lineWidth + 1) * i + lineWidth / 2;
      height = array[i] * (lineWidth + 1) * canvas.height / canvas.width;
      ctx.beginPath();
      if (updating && updating.indexOf(i) >= 0) {
        ctx.strokeStyle = 'red';
      } else {
        ctx.strokeStyle = 'black';
      }
      ctx.moveTo(x, canvas.height);
      ctx.lineTo(x, canvas.height - height);
      ctx.stroke();
      i++;
    }
  };
  compareAsync = function (x, y, callback) {
    setTimeout(function () {
      callback(x - y);
    }, compareCost);
  };
  swapAsync = function (array, i, j, callback) {
    var t;
    t = array[i];
    array[i] = array[j];
    array[j] = t;
    paint(array, [
      i,
      j
    ]);
    setTimeout(function () {
      callback();
    }, updateCost);
  };
  assignAsync = function (array, i, value, updating, callback) {
    array[i] = value;
    paint(array, updating);
    setTimeout(function () {
      callback();
    }, updateCost);
  };
  sortOperations = {
    Bubble: function (array, callback) {
      var i, j, r;
      i = 0;
      function loop_1(loop_1_cont) {
        if (i < array.length) {
          j = 0;
          function loop_0(loop_0_cont) {
            if (j < array.length - i - 1) {
              compareAsync(array[j], array[j + 1], function () {
                r = arguments[0];
                (function (cont) {
                  if (r > 0) {
                    swapAsync(array, j, j + 1, function () {
                      cont();
                    });
                  } else {
                    cont();
                  }
                }(function () {
                  j++;
                  loop_0(loop_0_cont);
                }));
              });
            } else {
              loop_0_cont();
            }
          }
          loop_0(function () {
            i++;
            loop_1(loop_1_cont);
          });
        } else {
          loop_1_cont();
        }
      }
      loop_1(function () {
        callback();
      });
    },
    Quick: function (array, callback) {
      var partitionAsync, sortAsync;
      partitionAsync = function (begin, end, callback) {
        var i, j, pivot, r;
        i = begin;
        j = end;
        pivot = array[Math.floor((begin + end) / 2)];
        function loop_4(loop_4_cont) {
          if (i <= j) {
            function loop_2(loop_2_cont) {
              if (true) {
                compareAsync(array[i], pivot, function () {
                  r = arguments[0];
                  if (r < 0) {
                    i++;
                  } else {
                    return loop_2_cont();
                  }
                  loop_2(loop_2_cont);
                });
              } else {
                loop_2_cont();
              }
            }
            loop_2(function () {
              function loop_3(loop_3_cont) {
                if (true) {
                  compareAsync(array[j], pivot, function () {
                    r = arguments[0];
                    if (r > 0) {
                      j--;
                    } else {
                      return loop_3_cont();
                    }
                    loop_3(loop_3_cont);
                  });
                } else {
                  loop_3_cont();
                }
              }
              loop_3(function () {
                (function (cont) {
                  if (i <= j) {
                    swapAsync(array, i, j, function () {
                      i++;
                      j--;
                      cont();
                    });
                  } else {
                    cont();
                  }
                }(function () {
                  loop_4(loop_4_cont);
                }));
              });
            });
          } else {
            loop_4_cont();
          }
        }
        loop_4(function () {
          callback(i);
        });
      };
      sortAsync = function (begin, end, callback) {
        var index;
        partitionAsync(begin, end, function () {
          index = arguments[0];
          (function (cont) {
            if (begin < index - 1) {
              sortAsync(begin, index - 1, function () {
                cont();
              });
            } else {
              cont();
            }
          }(function () {
            (function (cont) {
              if (index < end) {
                sortAsync(index, end, function () {
                  cont();
                });
              } else {
                cont();
              }
            }(function () {
              callback();
            }));
          }));
        });
      };
      sortAsync(0, array.length - 1, function () {
        callback();
      });
    },
    Selection: function (array, callback) {
      var j, mi, i, r;
      j = 0;
      function loop_6(loop_6_cont) {
        if (j < array.length - 1) {
          mi = j;
          i = j + 1;
          function loop_5(loop_5_cont) {
            if (i < array.length) {
              compareAsync(array[i], array[mi], function () {
                r = arguments[0];
                if (r < 0) {
                  mi = i;
                }
                i++;
                loop_5(loop_5_cont);
              });
            } else {
              loop_5_cont();
            }
          }
          loop_5(function () {
            swapAsync(array, mi, j, function () {
              j++;
              loop_6(loop_6_cont);
            });
          });
        } else {
          loop_6_cont();
        }
      }
      loop_6(function () {
        callback();
      });
    },
    Shell: function (array, callback) {
      var gaps, gap, i, temp, j, r;
      gaps = [
        701,
        301,
        132,
        57,
        23,
        10,
        4,
        1
      ];
      gap = Math.floor(array.length / 2);
      function loop_9(loop_9_cont) {
        if (gap > 0) {
          i = gap;
          function loop_8(loop_8_cont) {
            if (i < array.length) {
              temp = array[i];
              j = i;
              function loop_7(loop_7_cont) {
                if (j >= gap) {
                  compareAsync(temp, array[j - gap], function () {
                    r = arguments[0];
                    (function (cont) {
                      if (r < 0) {
                        assignAsync(array, j, array[j - gap], null, function () {
                          cont();
                        });
                      } else {
                        return loop_7_cont();
                        cont();
                      }
                    }(function () {
                      j -= gap;
                      loop_7(loop_7_cont);
                    }));
                  });
                } else {
                  loop_7_cont();
                }
              }
              loop_7(function () {
                assignAsync(array, j, temp, [j], function () {
                  i++;
                  loop_8(loop_8_cont);
                });
              });
            } else {
              loop_8_cont();
            }
          }
          loop_8(function () {
            gap = Math.floor(gap / 2);
            loop_9(loop_9_cont);
          });
        } else {
          loop_9_cont();
        }
      }
      loop_9(function () {
        callback();
      });
    }
  };
  this.supported = !!ctx;
  this.randomArray = randomArray;
  this.paint = paint;
  this.names = [];
  self = this;
  Object.keys(sortOperations).forEach(function (m) {
    self.names.push(m);
  });
  this.sortAsync = function (name, array, callback) {
    paint(array);
    sortOperations[name](array, function () {
      paint(array);
      callback();
    });
  };
};
function calcDirSize(path, callback) {
  var dirSize, dirBlockSize, _$err, files, i, filename, stats, subDirSize, subDirBlockSize;
  dirSize = 0;
  dirBlockSize = 0;
  fs.readdir(path, function (arguments, _$param0, _$param1) {
    _$err = _$param0;
    files = _$param1;
    if (_$err)
      throw _$err;
    i = 0;
    function _$loop_0(_$loop_0__$cont) {
      if (i < files.length) {
        filename = path + '/' + files[i];
        fs.lstat(filename, function (arguments, _$param2, _$param3) {
          _$err = _$param2;
          stats = _$param3;
          if (_$err)
            throw _$err;
          (function (_$cont) {
            if (stats.isDirectory()) {
              calcDirSize(filename, function (arguments, _$param4, _$param5, _$param6) {
                _$err = _$param4;
                subDirSize = _$param5;
                subDirBlockSize = _$param6;
                if (_$err)
                  throw _$err;
                dirSize += subDirSize;
                dirBlockSize += subDirBlockSize;
                _$cont();
              }.bind(this, arguments));
            } else {
              dirSize += stats.size;
              dirBlockSize += 512 * stats.blocks;
              _$cont();
            }
          }.bind(this)(function (_$err) {
            if (_$err !== undefined)
              return _$cont(_$err);
            i++;
            _$loop_0(_$loop_0__$cont);
          }.bind(this)));
        }.bind(this, arguments));
      } else {
        _$loop_0__$cont();
      }
    }
    _$loop_0 = _$loop_0.bind(this);
    _$loop_0(function () {
      callback(null, dirSize, dirBlockSize);
    });
  }.bind(this, arguments));
}
var fs, path, _$err, totalSize, totalBlockSize;
fs = require('fs');
path = process.argv[2];
if (!path) {
  path = '.';
}
calcDirSize(path, function (arguments, _$param7, _$param8, _$param9) {
  _$err = _$param7;
  totalSize = _$param8;
  totalBlockSize = _$param9;
  if (_$err)
    throw _$err;
  console.log('Size:', Math.round(totalSize / 1024), 'KB');
  console.log('Actual Size on Disk:', Math.round(totalBlockSize / 1024), 'KB');
}.bind(this, arguments));
/* Generated by Continuation.js v0.1.7 */
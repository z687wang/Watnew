/**
 * Created by WangZheZen on 2/3/2017.
 */
var request = require('request');
var uwaterlooApi=require('uwaterloo-api');
var uwclient = new uwaterlooApi({
    API_KEY : '743887d93f1df944a7acae0f78741746 '
});
function direct (instructions){
    var code = encodeURIComponent(instructions)

    var options = {
        url : 'https://westus.api.cognitive.microsoft.com/luis' +
        '/v2.0/apps/ae60bd7a-97ad-4dd3-925d-44b2db7fcd17?subscription-key=7a78a990591f446e8c594' +
        '3fe0cd73a76&q='+code+'&timezoneOffset=0.0&verbose=true',
        headers: {
            //   'User-Agent': 'request'
        }
    };
    function callback(error, response, body) {
        if (!error && response.statusCode == 200) {
            var info = JSON.parse(body);
          //  console.log(info.topScoringIntent.intent)
           // console.log(info)
            decide(info.topScoringIntent.intent,info.entities);
      //.intents[0].actions[0].parameters[0].value[0].entity
        }

    }
    request(options, callback);
}
function decide (str, entity){
  //  console.log(str)
    switch(str) {
        case "check_course":
          //  console.log('gg')
           check_course(entity);
            break;
        case "vending machines":

           vending_machine_(entity);
            break;
        case "get class room schedule":
            room_schedule(entity);
            break;
        case "check_available_seats":
            check_seats(entity);
    }
}
function check_course (entity){
    for (var i=0;i<entity.length;i++){
        switch  (entity[i].type){
            case "course_number":
                var  number = entity[i].entity;
                //  console.log(number);
                break;
            case "course_code":
                var code = entity[i].entity;
                //   console.log(code);
                break;

        }
    }
    course_info(code,number);
    console.log(code,number);
}

function course_info (course_code,course_number) {
    (uwclient.get("/courses/"+course_code+"/"+ course_number,function (err,res) {
       //   console.log(res);
        console.log("title: "+res.data.title);
        console.log("description: "+res.data.description);
        console.log("prerequisites: "+res.data.prerequisites);
        console.log("antirequistes: "+res.data.antirequisites);
        console.log("url: "+res.data.url);

    }))
}

direct("DC 1st floor");
function vending_machine_ (entity) {
    console.log('gg')
    for (var i=0;i<entity.length;i++){
        switch  (entity[i].type){ 
            case "string":
                var  building = entity[i].entity.toUpperCase();
                //  console.log(number);
                break;
            case "builtin.ordinal":
                var floor = entity[i].entity.charAt(0);
                //   console.log(code);
                break;

        }
    }
    vending(building,floor);
}
function vending (building,floor) {
    // console.log(building,floor);
    var p1=new Promise( function (resolve,reject) {
        uwclient.get('/buildings/'+building+'/vendingmachines', function (err, res) {
            if (!err) {
                resolve(res)
            } else {
                reject(res.meta.message);
            }
        })
    });

    p1.then (function (res){
            get_machines(res.data.vending_machines);
        },
        function (err){
            console.log(err)
        }
    );}
function get_machines(res){
    var list=[];
    for (var i=0;i<res.length;i++){
        var str;
        str = res[i].location +" vending machine products: "+ (res[i].products.join(', '));
        list.push(str)
    }
    //console.log('gg');
    console.log(list.join('\n'));
}
